{
  "README.html": {
    "href": "README.html",
    "title": "Product Catalog Application | ProductCatalog Documentation",
    "summary": "Product Catalog Application A C# console application that manages a product catalog with comprehensive error handling and unit tests. Features Add Product: Add new products with name and initial quantity Remove Product: Remove products from the catalog Purchase Product: Decrease product quantity when purchased List Products: Display all products sorted by quantity (descending order) Error Handling: Robust error handling with custom exceptions Unit Tests: Comprehensive test coverage using xUnit Project Structure ProductCatalogPP1/ ├── ProductCatalog/ # Main application │ ├── Models/ │ │ └── Product.cs # Product model class │ ├── Services/ │ │ ├── IProductCatalogService.cs # Service interface │ │ └── ProductCatalogService.cs # Service implementation │ ├── Exceptions/ │ │ └── ProductCatalogException.cs # Custom exceptions │ ├── Program.cs # Main entry point │ └── ProductCatalog.csproj # Project file ├── ProductCatalog.Tests/ # Unit tests │ ├── Models/ │ │ └── ProductTests.cs # Product model tests │ ├── Services/ │ │ └── ProductCatalogServiceTests.cs # Service tests │ ├── Exceptions/ │ │ └── ExceptionTests.cs # Exception tests │ └── ProductCatalog.Tests.csproj # Test project file ├── ProductCatalog.sln # Solution file └── README.md # This file Getting Started Prerequisites .NET 8.0 SDK or later Visual Studio 2022, Visual Studio Code, or any C# compatible IDE Building the Solution Clone or download the project Open a terminal/command prompt in the project root directory Build the solution: dotnet build Running the Application To run the console application: dotnet run --project ProductCatalog Running Unit Tests To execute all unit tests: dotnet test To run tests with detailed output: dotnet test --verbosity normal To generate code coverage report (if you have coverage tools installed): dotnet test --collect:\"XPlat Code Coverage\" Usage Examples Basic Operations var catalog = new ProductCatalogService(); // Add products catalog.AddProduct(\"Laptop\", 10); catalog.AddProduct(\"Mouse\", 25); catalog.AddProduct(\"Keyboard\", 15); // Purchase products catalog.PurchaseProduct(\"Mouse\", 5); // Decreases quantity by 5 // List products by quantity (descending) var products = catalog.ListProductsByQuantity(); foreach (var product in products) { Console.WriteLine(product); // Output: \"Mouse: 20 units\" } // Remove products catalog.RemoveProduct(\"Keyboard\"); // Get specific product var laptop = catalog.GetProduct(\"Laptop\"); Console.WriteLine($\"Laptop quantity: {laptop.Quantity}\"); Error Handling The application handles various error scenarios: ProductNotFoundException: Thrown when trying to access a non-existent product ProductAlreadyExistsException: Thrown when adding a product that already exists InsufficientQuantityException: Thrown when trying to purchase more than available ArgumentException: Thrown for invalid inputs (null names, negative quantities, etc.) API Reference IProductCatalogService Interface Methods void AddProduct(string name, int quantity): Adds a new product void RemoveProduct(string name): Removes an existing product void PurchaseProduct(string name, int quantity): Purchases product (decreases quantity) IReadOnlyList<Product> ListProductsByQuantity(): Returns products sorted by quantity (desc) Product GetProduct(string name): Gets a specific product by name int GetProductCount(): Returns total number of products Product Class Properties string Name: Product name (trimmed, case-insensitive for comparisons) int Quantity: Current quantity in stock Methods ToString(): Returns formatted string representation Equals(object obj): Case-insensitive name comparison GetHashCode(): Case-insensitive hash code Testing The project includes comprehensive unit tests covering: Model Tests: Product class validation and behavior Service Tests: All CRUD operations and edge cases Exception Tests: Custom exception behavior Integration Tests: Complex scenarios with multiple operations Test Categories Positive Tests: Valid operations that should succeed Negative Tests: Invalid operations that should throw exceptions Edge Cases: Boundary conditions and special scenarios Integration Tests: Real-world usage patterns Technical Details Target Framework: .NET 8.0 Testing Framework: xUnit Architecture: Service-oriented with dependency injection support Error Handling: Custom exception hierarchy Thread Safety: Not thread-safe (single-threaded usage assumed) Storage: In-memory dictionary (no persistence) Future Enhancements Potential improvements that could be added: Persistence layer (database or file storage) Thread-safety for concurrent operations Product categories and advanced filtering Price tracking and inventory valuation REST API endpoints Audit logging for all operations Bulk operations (add/remove multiple products) Low stock alerts and inventory management"
  },
  "docs/api/ProductCatalog.Exceptions.InsufficientQuantityException.html": {
    "href": "docs/api/ProductCatalog.Exceptions.InsufficientQuantityException.html",
    "title": "Class InsufficientQuantityException | ProductCatalog Documentation",
    "summary": "Class InsufficientQuantityException Namespace ProductCatalog.Exceptions Assembly ProductCatalog.dll Exception thrown when trying to purchase more items than available public class InsufficientQuantityException : ProductCatalogException, ISerializable Inheritance object Exception ProductCatalogException InsufficientQuantityException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InsufficientQuantityException(string, int, int) public InsufficientQuantityException(string productName, int availableQuantity, int requestedQuantity) Parameters productName string availableQuantity int requestedQuantity int"
  },
  "docs/api/ProductCatalog.Exceptions.ProductAlreadyExistsException.html": {
    "href": "docs/api/ProductCatalog.Exceptions.ProductAlreadyExistsException.html",
    "title": "Class ProductAlreadyExistsException | ProductCatalog Documentation",
    "summary": "Class ProductAlreadyExistsException Namespace ProductCatalog.Exceptions Assembly ProductCatalog.dll Exception thrown when trying to add a product that already exists public class ProductAlreadyExistsException : ProductCatalogException, ISerializable Inheritance object Exception ProductCatalogException ProductAlreadyExistsException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ProductAlreadyExistsException(string) public ProductAlreadyExistsException(string productName) Parameters productName string"
  },
  "docs/api/ProductCatalog.Exceptions.ProductCatalogException.html": {
    "href": "docs/api/ProductCatalog.Exceptions.ProductCatalogException.html",
    "title": "Class ProductCatalogException | ProductCatalog Documentation",
    "summary": "Class ProductCatalogException Namespace ProductCatalog.Exceptions Assembly ProductCatalog.dll Base exception for product catalog operations public class ProductCatalogException : Exception, ISerializable Inheritance object Exception ProductCatalogException Implements ISerializable Derived InsufficientQuantityException ProductAlreadyExistsException ProductNotFoundException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ProductCatalogException(string) public ProductCatalogException(string message) Parameters message string ProductCatalogException(string, Exception) public ProductCatalogException(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "docs/api/ProductCatalog.Exceptions.ProductNotFoundException.html": {
    "href": "docs/api/ProductCatalog.Exceptions.ProductNotFoundException.html",
    "title": "Class ProductNotFoundException | ProductCatalog Documentation",
    "summary": "Class ProductNotFoundException Namespace ProductCatalog.Exceptions Assembly ProductCatalog.dll Exception thrown when a product is not found public class ProductNotFoundException : ProductCatalogException, ISerializable Inheritance object Exception ProductCatalogException ProductNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ProductNotFoundException(string) public ProductNotFoundException(string productName) Parameters productName string"
  },
  "docs/api/ProductCatalog.Exceptions.html": {
    "href": "docs/api/ProductCatalog.Exceptions.html",
    "title": "Namespace ProductCatalog.Exceptions | ProductCatalog Documentation",
    "summary": "Namespace ProductCatalog.Exceptions Classes InsufficientQuantityException Exception thrown when trying to purchase more items than available ProductAlreadyExistsException Exception thrown when trying to add a product that already exists ProductCatalogException Base exception for product catalog operations ProductNotFoundException Exception thrown when a product is not found"
  },
  "docs/api/ProductCatalog.Models.Product.html": {
    "href": "docs/api/ProductCatalog.Models.Product.html",
    "title": "Class Product | ProductCatalog Documentation",
    "summary": "Class Product Namespace ProductCatalog.Models Assembly ProductCatalog.dll Represents a product in the catalog public class Product Inheritance object Product Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Product(string, int) public Product(string name, int quantity) Parameters name string quantity int Properties Name public string Name { get; set; } Property Value string Quantity public int Quantity { get; set; } Property Value int Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "docs/api/ProductCatalog.Models.html": {
    "href": "docs/api/ProductCatalog.Models.html",
    "title": "Namespace ProductCatalog.Models | ProductCatalog Documentation",
    "summary": "Namespace ProductCatalog.Models Classes Product Represents a product in the catalog"
  },
  "docs/api/ProductCatalog.Services.IProductCatalogService.html": {
    "href": "docs/api/ProductCatalog.Services.IProductCatalogService.html",
    "title": "Interface IProductCatalogService | ProductCatalog Documentation",
    "summary": "Interface IProductCatalogService Namespace ProductCatalog.Services Assembly ProductCatalog.dll Interface for product catalog operations public interface IProductCatalogService Methods AddProduct(string, int) Adds a new product to the catalog void AddProduct(string name, int quantity) Parameters name string Product name quantity int Initial quantity Exceptions ArgumentException Thrown when name is invalid or quantity is negative GetProduct(string) Gets a product by name Product GetProduct(string name) Parameters name string Product name Returns Product The product if found GetProductCount() Gets the total number of products in the catalog int GetProductCount() Returns int Number of unique products ListProductsByQuantity() Lists all products sorted by quantity in descending order IReadOnlyList<Product> ListProductsByQuantity() Returns IReadOnlyList<Product> List of products sorted by quantity (highest first) PurchaseProduct(string, int) Purchases a product (decreases quantity) void PurchaseProduct(string name, int quantity) Parameters name string Product name quantity int Quantity to purchase Exceptions ArgumentException Thrown when quantity is not positive RemoveProduct(string) Removes a product from the catalog void RemoveProduct(string name) Parameters name string Product name to remove"
  },
  "docs/api/ProductCatalog.Services.ProductCatalogService.html": {
    "href": "docs/api/ProductCatalog.Services.ProductCatalogService.html",
    "title": "Class ProductCatalogService | ProductCatalog Documentation",
    "summary": "Class ProductCatalogService Namespace ProductCatalog.Services Assembly ProductCatalog.dll Implementation of product catalog operations public class ProductCatalogService : IProductCatalogService Inheritance object ProductCatalogService Implements IProductCatalogService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProductCatalogService() public ProductCatalogService() Methods AddProduct(string, int) Adds a new product to the catalog public void AddProduct(string name, int quantity) Parameters name string Product name quantity int Initial quantity Exceptions ArgumentException Thrown when name is invalid or quantity is negative GetProduct(string) Gets a product by name public Product GetProduct(string name) Parameters name string Product name Returns Product The product if found GetProductCount() Gets the total number of products in the catalog public int GetProductCount() Returns int Number of unique products ListProductsByQuantity() Lists all products sorted by quantity in descending order public IReadOnlyList<Product> ListProductsByQuantity() Returns IReadOnlyList<Product> List of products sorted by quantity (highest first) PurchaseProduct(string, int) Purchases a product (decreases quantity) public void PurchaseProduct(string name, int quantity) Parameters name string Product name quantity int Quantity to purchase Exceptions ArgumentException Thrown when quantity is not positive RemoveProduct(string) Removes a product from the catalog public void RemoveProduct(string name) Parameters name string Product name to remove"
  },
  "docs/api/ProductCatalog.Services.html": {
    "href": "docs/api/ProductCatalog.Services.html",
    "title": "Namespace ProductCatalog.Services | ProductCatalog Documentation",
    "summary": "Namespace ProductCatalog.Services Classes ProductCatalogService Implementation of product catalog operations Interfaces IProductCatalogService Interface for product catalog operations"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ProductCatalog Documentation",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ProductCatalog Documentation",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ProductCatalog Documentation",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}